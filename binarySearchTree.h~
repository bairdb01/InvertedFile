/***
    Header file for tree.c
***/

#ifndef STDIO_H_INCLUDED
#define STDIO_H_INCLUDED
#include <stdio.h>
#endif

#ifndef STDLIB_H_INCLUDED
#define STDLIB_H_INCLUDED
#include <stdlib.h>
#endif

#ifndef STRING_H_INCLUDED
#define STRING_H_INCLUDED
#include <string.h>
#endif


#ifndef LIST_H_INCLUDED
#define LIST_H_INCLUDED
#include "list.h"
#endif

typedef struct TreeNode {
    char *term;
    Node *dictionary;
    struct TreeNode *right;
    struct TreeNode *left;
}TreeNode;

/***
    Initializes a node with a given id
    @return : pointer to the created node
***/
TreeNode *initTreeNode (char *term, char *docId);

/***
    Frees the entire tree
***/
void freeTree (TreeNode *tree);
/***
    Frees up a TreeNode
***/
void freeTreeNode (TreeNode *node);

/***
    Adds node using binary search method
***/
void insertTreeNode (TreeNode *tree, TreeNode );

/***
    Prints a tree node
***/
void printTreeNode (TreeNode *node);
/***
    Print the linked list alphabetically (left-depth-first)
***/
void printTree (TreeNode *tree);

/***
    Search the tree for a term
    @return : pointer to term's TreeNode in the tree
***/
TreeNode *searchTree(TreeNode *tree, char *term);
