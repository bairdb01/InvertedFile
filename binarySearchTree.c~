/***
    Filename: tree.c
    Date Created: April 1, 2016
    Author Benjamin Baird
    Date Updated: April 1, 2016
    Description: Implementation of a binary search tree where each node contains
                 a string and a linked list of Nodes (contain strings). 
***/

#ifndef TREE_H_INCLUDED
#define TREE_H_INCLUDED
#include "tree.h"
#endif

typedef struct TreeNode {
    char *term;
    Node *dictionary;
    struct TreeNode *right;
    struct TreeNode *left;
}TreeNode;

TreeNode *initTreeNode (char *term, char *docId) {
    TreeNode *node = malloc(sizeof(Node));
    node->term = malloc(sizeof(char)*(int)strlen(term));
    node->term = strcpy(node->term, term);
    node->dictionary = initNode(node->dictionary, docId);
    node->left = NULL;
    node->right = NULL;
    return node;
}

void freeTree (TreeNode *tree) {
    TreeNode * temp = tree;
    while (temp != NULL) {
        if (temp->left != NULL)    
            freeTree(tree->left);
        if (temp->right != NULL)
            freeTree(tree->left);
        freeTreeNode(temp);
    }
    freeTreeNode(tree);
}

void freeTreeNode (TreeNode *node) {
    if (temp->left != NULL)    
        free(temp->left);
    if (temp->right != NULL)
        free(temp->right);
    freeNodeList(temp->dictionary);
    free(term);
    free(temp);
}

/*void insertTreeNode (TreeNode *tree, TreeNode *node) {*/


/*}*/

/*void printTree (TreeNode *tree);*/

/*TreeNode *searchTree(TreeNode *tree, char *term);*/
